'''
Desc: This file grabs tex sources from a random sample of the population generated by update_kaggle_metadata.py
There are three steps:
    1. Collect the list of json objects from arxiv-metadata-oai-snapshot.json file
    2. Select a random sample from the list
    3. Download the tex sources of the sampled papers. If they don't have a tex source, 
       we just drop it from the sample- it doesn't matter for this project. Right now,
       we just assume the file type to be a tar, so single file tex sources don't work either

TODO: Add support for single file (non tar) tex sources
'''

import sys
import os
import shutil
import json
from random import sample
import requests
import subprocess

DATA_DIR = '/home/markn/Documents/arxiv/TexToHtml/DataDir'
TEX_SOURCE_DIR = f'{ DATA_DIR }/TexSources'
F_JSON = f'{ DATA_DIR }/arxiv-metadata-oai-snapshot.json'
BASE_URL = 'https://export.arxiv.org/e-print/'

def build_paper_metadata_list ():
    with open(F_JSON, "r") as snapshot:
        try:
            ret_list = []
            lines = snapshot.readlines()
            for line in lines:
                ret_list.append(json.loads(line.strip()))
            print ("SNAPSHOT READ SUCCESSFULLY")
            print (f"NUMBER OF PAPERS N={len(ret_list)}\n")
            return ret_list
        except:
            print ("SNAP SHOT COULDN'T BE READ")
            sys.exit(1)

def get_sample (population, sample_size=50):
    return sample(population, sample_size)

def _get_tex_from_metadata (paper_md):
    id = paper_md['id']
    versions = paper_md['versions']
    latest_version = versions[0]['version'] if len(versions) == 1 else sorted(versions, key=lambda x: (int(str(x['version'][1:]))))[-1]['version']
    fname = id + latest_version
    print (fname)
    res = requests.get(BASE_URL + fname, allow_redirects=True, stream=True)
    success = False
    if res.ok:
        path = os.path.join(TEX_SOURCE_DIR, fname)
        fp = os.path.join(path, fname)
        os.mkdir(path)
        with open(fp, 'ab') as tar:
            tar.write(res.raw.read())
        success = not subprocess.run(['tar', 'xf', str(fp), '-C', str(path)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode
        os.remove(fp)
        if not success:
            shutil.rmtree(path)
        return success
    return False

def download_sample_tex_sources (sample):
    success_count = 0
    n = len(sample)
    for i, paper_md in enumerate(sample):
        try:
            print(f"DOWNLOADING SOURCE {i+1}/{n}: ", end="")
            if _get_tex_from_metadata(paper_md):
                print ('DOWNLOAD SUCCESSFUL\n')
                success_count += 1
            else:
                print ('DOWNLOAD FAILED\n')
        except:
            print ('DOWNLOAD FAILED\n')
    print ("\n*******************************************")
    print (f"DOWNLOAD COMPLETED WITH {n-success_count} FAILURES")
    print (f"SAMPLE SIZE n={success_count}")
    print ("*******************************************")

def main():
    population = build_paper_metadata_list()
    sample = get_sample(population, 10)
    download_sample_tex_sources(sample)

if __name__ == "__main__":
    main()

            

